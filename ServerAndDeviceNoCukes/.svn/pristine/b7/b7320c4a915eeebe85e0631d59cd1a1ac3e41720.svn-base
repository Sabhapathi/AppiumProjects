package com.xora.mc.pages.mileage

import java.util

import com.xora.mc.pages.mileage.MileageTripListPage._
import com.xora.mc.util.LoadableElement
import com.xora.mc.util.XpathUtils._
import com.xora.util.Optionally
import com.xora.util.SleepTime._
import org.openqa.selenium._
import org.openqa.selenium.support.ui
import org.openqa.selenium.support.ui.{ExpectedConditions, LoadableComponent, WebDriverWait}

import scala.collection.JavaConverters._
import scala.util.control.Breaks


/**
 * Created with IntelliJ IDEA.
 * User: admin
 * Date: 8/8/13
 * Time: 3:48 PM
 * To change this template use File | Settings | File Templates.
 */
class MileageTripListPage(val driver: WebDriver, val baseUrl: String)
  extends LoadableComponent[MileageTripListPage]
  with LoadableElement with  Optionally{

//  private var dateFilter: DateFilterTimePeriodPickerWidget = null
  def load() {
    val url = baseUrl + "/mileage/trip/list/doList.page"
    driver.get(url)
  }

  def isLoaded() {
    verifyElementLoaded(driver, By.xpath(PAGE_TITLE_XPATH))
  }

  private def findTripRow(tripListColumnValue: String) = {
    val tripRowXpath = TRIP_BASE_XPATH + "//tr[.//*[text()='" + tripListColumnValue + "']]"
    val tripRowEl = new WebDriverWait(driver, 10)
      .until(ExpectedConditions.elementToBeClickable(By.xpath(tripRowXpath)))
    tripRowEl
  }

  private def tripRowElements(tripListColumnValue: String) = {
    val tripRowEl = findTripRow(tripListColumnValue)
    val tripRowEls = tripRowEl.findElements(By.tagName("td")).asScala
    tripRowEls
  }

  def getPageHeader(): String = {
    val pageHeaderEl = driver.findElement(By.className(TITLE_CLASS))
    val pageHeadline = pageHeaderEl.getText.trim
    pageHeadline
  }

  def getElementsPresentInToolbar()=
  {
    val toolbarElementEls = driver.findElements(By.xpath(TOOLBAR_XPATH)).asScala
    val toolbarElementsMap = toolbarElementEls.map(_.getText)
    var toolBarElementsList : List[String] = List()
    for(element<-toolbarElementsMap)  {
      if(!element.isEmpty) {
        toolBarElementsList = toolBarElementsList ::: List(element)
      }
    }
    toolBarElementsList
  }

  def validateExpandToolBar() = {
    var flag = false
    val toolBarEl = driver.findElement(By.id(TOOL_BAR_EXPAND_OR_COLLAPSE_IMAGE_ID))
    if(toolBarEl.getAttribute("src").contains(EXPAND_IMAGE)){
      toolBarEl.click()
    }
    if(toolBarEl.getAttribute("src").contains(COLLAPSE_IMAGE)){
      flag = true
    }
    flag
  }

  def validateCollapseToolBar() = {
    var flag = false
    val toolBarEl = driver.findElement(By.id(TOOL_BAR_EXPAND_OR_COLLAPSE_IMAGE_ID))
    if(toolBarEl.getAttribute("src").contains(COLLAPSE_IMAGE)){
      toolBarEl.click()
    }
    if(toolBarEl.getAttribute("src").contains(EXPAND_IMAGE)){
      flag = true
    }
    flag
  }

  def presenceOfDateFilter() = {
    val dateFilterEl = driver.findElement(By.id(DATE_FILTER_ID))
    val flag = dateFilterEl.isDisplayed
    flag
  }

  def validateRefreshButtonIsClickable() = {
    var flag = false
    val refreshButton = new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(By.className(REFRESH_BUTTON_CLASS)))
    if(refreshButton.isDisplayed) {
      flag = true
    }
    flag
  }

  def downloadExcel(){
    val downloadEle = driver.findElement(By.id(DOWNLOAD_LIST_ID))
    downloadEle.click()
  }

  def validateDownloadExcelSymbolPresent()= {
    var flag = false
    val excelDownloadIcon = driver.findElement(By.id(DOWNLOAD_LIST_ID))
    if(excelDownloadIcon.isDisplayed) {
      flag = true
    }
    flag
  }

  def presenceOfHelpIcon = {
    val helpIconEl = driver.findElement(By.id(HELP_ICON_ID))
    val flag = helpIconEl.isDisplayed && helpIconEl.isEnabled
    flag
  }

  def getNewPageHeaderOnClickingHelpLink: String = {
    val parentWindowHandle = driver.getWindowHandle
    val helpLink = driver.findElement(By.xpath("//a[@id = '"+HELP_ICON_ID+"']"))
    helpLink.click()
    sleepTime(2000)
    val windowHandles: util.Set[String] = driver.getWindowHandles
    import scala.collection.JavaConversions._
    var done = false
    for (windowHandle <- windowHandles if !done) {
      if (!(windowHandle == parentWindowHandle)) {
        driver.switchTo.window(windowHandle)
        done = true
      }
    }
    val pageHeader = driver.findElement(By.className("pageHeader")).getText
    driver.close()
    driver.switchTo().window(parentWindowHandle)
    pageHeader
  }

  def headerNames(): List[String] = {
    val headerEl = driver.findElement(By.id(TRIP_LIST_HEADER_ID))
    val headerNameEls = headerEl.findElements(By.tagName("th")).asScala
    val headerNameEl = headerNameEls.patch(0, Nil, 1)
    val headerNamesList = headerNameEl.map(_.getText)
    headerNamesList.toList
  }

  def submittedWorkerName(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val submittedName = tripRowEls(2).getText.trim
    submittedName
  }

  def categoryOfTrip(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val submittedName = tripRowEls(3).getText.trim
    submittedName
  }

  def purposeOfTrip(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val purpose = tripRowEls(4).getText.trim
    purpose
  }

  def odometerDistance(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val odometerDistance = tripRowEls(5).getText.trim
    odometerDistance
  }

  def gpsDistance(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val distanceOfGps = tripRowEls(6).getText.trim
    distanceOfGps
  }

  def commuterDistance(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val commuterDistance = tripRowEls(7).getText.trim
    commuterDistance
  }

  def getTotalExpenseOfTrip(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val expense = tripRowEls(8).getText.trim
    expense
  }

  def statusOfTrip(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val status = tripRowEls(9).getText.trim
    status
  }

  def dateAndTimeOfTrip(tripListColumnValue: String): String = {
    val tripRowEls = tripRowElements(tripListColumnValue)
    val dateAndTime = tripRowEls(1).getText.trim
    dateAndTime
  }

  def getTripData(headerName: String):List[String]= {
    val result = headerName match {
      case "Date" => driver.findElements(By.xpath(DATE_CELL_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText)
      case "Submitted By" => driver.findElements(By.xpath(SUBMIT_CELL_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText)
      case "Category" => driver.findElements(By.xpath(CATEGORY_CELL_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText)
      case "Purpose" => driver.findElements(By.xpath(PURPOSE_CELL_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText)
      case "Distance - Odometer" => driver.findElements(By.xpath(ODOMETER_CELL_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText)
      case "Distance - GPS" => driver.findElements(By.xpath(GPS_CELL_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText)
      case "Commuter Distance" => driver.findElements(By.xpath(COMMUTER_DISTANCE_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText)
      case "Total Expense" => driver.findElements(By.xpath(TOTAL_EXPENSE_CELL_XPATH)).asScala.filter(!_.getText.isEmpty).map(_.getText.substring(1))
      case "Status" => driver.findElements(By.xpath(STATUS_CELL_XPATH )).asScala.filter(!_.getText.isEmpty).map(_.getText)
    }
    result.toList
  }

  def contextMenuOfTrip(tripListColumnValue: String) = {
    val TripRowEl = findTripRow(tripListColumnValue)
    sleepTime(minWaitTime*1000)
    TripRowEl.click()
    new MileageTripListPageContextMenuPopup(driver, this)
  }

  def sort(columnName: String, order: String): MileageTripListPage = {
    val columnEl = new WebDriverWait(driver, maxWaitTime + 5).until(ExpectedConditions.elementToBeClickable(By.xpath(TRIPS_LIST_PAGE_COLUMNS_XPATH + "[.//*[contains(text(),'" + columnName + "')]]")))
    if (columnEl.getAttribute("innerHTML").contains("style")) {
      val columnEl = new WebDriverWait(driver, maxWaitTime + 5).until(ExpectedConditions.elementToBeClickable(By.xpath(TRIPS_LIST_PAGE_COLUMNS_XPATH + "//span[text() = '" + columnName + "']")))
      columnEl.click()
      sleepTime(minWaitTime * 1000)
      optionally {
        val busyMessage = driver.findElement(By.className(BUSY_MSG_CLASS)).getText
        new WebDriverWait(driver, maxWaitTime)
          .until(ui.ExpectedConditions.invisibilityOfElementWithText(By.className(BUSY_MSG_CLASS), busyMessage))
      }
    }
    sleepTime(minWaitTime * 1000)
    val sortedImg = new WebDriverWait(driver, maxWaitTime + 5).until(ExpectedConditions.visibilityOfElementLocated(By.xpath(TRIPS_LIST_PAGE_COLUMNS_XPATH + "//img"))).getAttribute("src")
    if (order.equalsIgnoreCase("ascending")) {
      if (sortedImg.contains("sortArrowUp.gif")) {
        sleepTime(minWaitTime * 1000)
        driver.findElement(By.xpath(TRIPS_LIST_PAGE_COLUMNS_XPATH + "//span[text() = '" + columnName + "']")).click()
        sleepTime(minWaitTime * 1000)
        optionally {
          val busyMessage = driver.findElement(By.className(BUSY_MSG_CLASS)).getText
          new WebDriverWait(driver, maxWaitTime + 5)
            .until(ui.ExpectedConditions.invisibilityOfElementWithText(By.className(BUSY_MSG_CLASS), busyMessage))
        }
        sleepTime(minWaitTime * 1000)
      }
    }
    if (order.equalsIgnoreCase("descending")) {
      if (sortedImg.contains("sortArrowDown.gif")) {
        sleepTime(minWaitTime * 1000)

        val columnELe = driver.findElement(By.xpath(TRIPS_LIST_PAGE_COLUMNS_XPATH + "[.//*[contains(text(),'" + columnName + "')]]"))
        columnELe.click()
        sleepTime(minWaitTime * 1000)
        optionally {
          val busyMessage = driver.findElement(By.className(BUSY_MSG_CLASS)).getText
          new WebDriverWait(driver, maxWaitTime + 5)
            .until(ui.ExpectedConditions.invisibilityOfElementWithText(By.className(BUSY_MSG_CLASS), busyMessage))
        }
        sleepTime(minWaitTime * 1000)
      }
    }
    this
  }

  def getLatestTripRow = {
    sleepTime(minWaitTime * 1000)
    sort("Submitted Date", "descending")
    sleepTime(minWaitTime * 1000)
    driver.navigate().refresh()
    val latestTripEl = new WebDriverWait(driver, maxWaitTime)
      .until(ExpectedConditions.elementToBeClickable(By.xpath(TRIP_BASE_XPATH + "//tr[2]")))
    latestTripEl
  }


  def contextMenuOfLatestTrip ={
      val formRowEl = getLatestTripRow.findElement(By.tagName("td"))
      sleepTime(minWaitTime * 1000)
      formRowEl.click()
      sleepTime(minWaitTime * 1000)
    new MileageTripListPageContextMenuPopup(driver, this)
    }

//  def getDateFilter: DateFilterTimePeriodPickerWidget =
//  {
//    if (dateFilter == null)
//    {
//      dateFilter = new DateFilterTimePeriodPickerWidget(driver, "")
//    }
//    dateFilter
//  }

  def getRequiredTripDetailsFromServerSyncResponse(serverSyncResponse: String, tripKeyword: String): String = {
    val allTripDetailsFromServerSync = serverSyncResponse.substring((serverSyncResponse.indexOf("<TRP")),(serverSyncResponse.indexOf("<TC")))
    val allTripTagsList =  allTripDetailsFromServerSync.split("/>")
    var requiredTripDetails = ""
    val loop = new Breaks
    loop.breakable{
      for(i<- 0 until allTripTagsList.size) {
        if(allTripTagsList(i).contains(tripKeyword)) {
          requiredTripDetails = allTripTagsList(i)
          loop.break()
        }
      }
    }
    requiredTripDetails
  }

  def deleteAllTrips() {
    selectAllTrips()
    sleepTime((minWaitTime/2)*1000)
    clickDeleteTripButtonOnToolBarAndAccept()
  }

  def selectAllTrips() {
    val selectAllTripCheckBox = driver.findElement(By.id("selectAll"))
    if(!selectAllTripCheckBox.isSelected) {
      selectAllTripCheckBox.click()
    }
  }

  def clickDeleteTripButtonOnToolBarAndAccept() {
    val deleteTripButton = driver.findElement(By.id("tool.mileage.trips.delete"))
    deleteTripButton.click()
    sleepTime((minWaitTime/2)*1000)
    try {
      val confirmDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_ALERT_CLASS) + "]"))
      val oKButton = confirmDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "OK" + "']"))
      oKButton.click()
    }
    catch {
      case e: Exception => {
        deleteDeleteTripConfirmationDialog
      }
    }
  }

  def clickDeleteTripButtonOnToolBarAndCancel() {
    val deleteTripButton = driver.findElement(By.id("tool.mileage.trips.delete"))
    deleteTripButton.click()
    try {
      val confirmDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]"))
      val oKButton = confirmDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "OK" + "']"))
      oKButton.click()
    }
    catch {
      case e: Exception => {
        cancelDeleteTripConfirmDialog
      }
    }
  }

  private def cancelDeleteTripConfirmDialog(){
    val confirmDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]"))
    val cancelButton = confirmDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "Cancel" + "']"))
    cancelButton.click()
    sleepTime(minWaitTime*1000)
  }

  private def deleteDeleteTripConfirmationDialog(){
    val confirmDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]"))
    val deleteButton = confirmDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "Delete" + "']"))
    deleteButton.click()
    sleepTime(minWaitTime*1000)
  }
}

object MileageTripListPage {

  val PAGE_TITLE = "Trips"
  val TITLE_CLASS = "pageHeadlineText"
  val PAGE_TITLE_XPATH = "//*[@class='" + TITLE_CLASS + "' and .//text()='" + PAGE_TITLE + "']"
  val TRIP_LIST_HEADER_ID = "listContentDiv"
  val TRIP_BASE_XPATH = "//div[@id='" + TRIP_LIST_HEADER_ID + "']"
  val DATE_CELL_XPATH = TRIP_BASE_XPATH+"//td[2]"
  val SUBMIT_CELL_XPATH = TRIP_BASE_XPATH+"//td[3]"
  val CATEGORY_CELL_XPATH = TRIP_BASE_XPATH+"//td[4]"
  val PURPOSE_CELL_XPATH = TRIP_BASE_XPATH+"//td[5]"
  val ODOMETER_CELL_XPATH = TRIP_BASE_XPATH+"//td[6]"
  val GPS_CELL_XPATH = TRIP_BASE_XPATH+"//td[7]"
  val COMMUTER_DISTANCE_XPATH = TRIP_BASE_XPATH+"//td[8]"
  val TOTAL_EXPENSE_CELL_XPATH = TRIP_BASE_XPATH+"//td[9]"
  val STATUS_CELL_XPATH =  TRIP_BASE_XPATH+"//td[10]"
  val DIALOG_CONFIRM_CLASS = "dialog dialog-confirm"
  val DIALOG_ALERT_CLASS = "dialog dialog-alert"
  val DIALOG_BUTTON_CLASS = "linkButton"
  val TOOLBAR_ID = "mileage.trip.list.toolbar.contentWidget"
  val TOOLBAR_XPATH = "//div[@id='" + TOOLBAR_ID + "']//a//span"
  val DOWNLOAD_LIST_ID = "tool.mileage.trip.list.download"
  val HELP_ICON_ID = "mileageTripListInPageHelp"
  val REFRESH_BUTTON_CLASS = "refreshNowButton"
  val DATE_FILTER_ID = "inline-date-filter-container"
  val TOOL_BAR_EXPAND_OR_COLLAPSE_IMAGE_ID = "mileage.trip.list.toolbar.contentWidgetImage"
  val COLLAPSE_IMAGE = "widget_Collapse.gif"
  val EXPAND_IMAGE = "widget_Expand.gif"
  val BUSY_MSG_CLASS = "busyMsg"
  val TRIPS_LIST_PAGE_COLUMNS_XPATH = TRIP_BASE_XPATH + "//table//th"

}
