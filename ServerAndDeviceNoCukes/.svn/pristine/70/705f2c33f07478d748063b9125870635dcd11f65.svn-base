package com.xora.mc.pages.partsCatalog

import org.openqa.selenium.{By, WebDriver}
import org.openqa.selenium.support.ui.{Select, ExpectedConditions, WebDriverWait, LoadableComponent}
import com.xora.mc.util.LoadableElement
import com.xora.mc.pages.partsCatalog.PartsCatalogPage._
import scala.collection.JavaConverters._
import com.xora.util.SleepTime._
import java.util
import com.xora.mc.util.XpathUtils._

/**
 * Created with IntelliJ IDEA.
 * User: Itee.Yadav
 * Date: 5/15/15
 * Time: 3:01 PM
 * To change this template use File | Settings | File Templates.
 */
class PartsCatalogPage(val driver: WebDriver, val baseUrl: String)
  extends LoadableComponent[PartsCatalogPage]
  with LoadableElement {

  def load() {
    val url = baseUrl + "/prices/list/doList.page"
    driver.get(url)
  }

  def isLoaded() {
    verifyElementLoaded(driver, By.xpath(PAGE_TITLE_XPATH))
  }

  def getPageHeader(): String = {
    val pageHeaderEl = driver.findElement(By.className(TITLE_CLASS))
    val pageHeadline = pageHeaderEl.getText.trim
    pageHeadline
  }

  def getElementsPresentInToolbar() = {
    val toolbarElementEls = driver.findElements(By.xpath(TOOLBAR_XPATH)).asScala
    val toolBarElementsList = toolbarElementEls.filter(_.getText.nonEmpty).map(_.getText.trim)
    toolBarElementsList
  }

  def validateExpandToolBar() = {
    var flag = false
    val toolBarEl = driver.findElement(By.id(TOOL_BAR_EXPAND_OR_COLLAPSE_IMAGE_ID))
    if(toolBarEl.getAttribute("src").contains(EXPAND_IMAGE)){
      toolBarEl.click()
    }
    if(toolBarEl.getAttribute("src").contains(COLLAPSE_IMAGE)){
      flag = true
    }
    flag
  }

  def validateCollapseToolBar() = {
    var flag = false
    val toolBarEl = driver.findElement(By.id(TOOL_BAR_EXPAND_OR_COLLAPSE_IMAGE_ID))
    if(toolBarEl.getAttribute("src").contains(COLLAPSE_IMAGE)){
      toolBarEl.click()
    }
    if(toolBarEl.getAttribute("src").contains(EXPAND_IMAGE)){
      flag = true
    }
    flag
  }

  def presenceOfDownloadExcelSymbol()= {
    var flag = false
    val excelDownloadIcon = driver.findElement(By.id(DOWNLOAD_LIST_ID))
    if(excelDownloadIcon.isDisplayed) {
      flag = true
    }
    flag
  }

  def presenceOfHelpIcon = {
    val helpIconEl = driver.findElement(By.id(HELP_ICON_ID))
    val flag = helpIconEl.isDisplayed && helpIconEl.isEnabled
    flag
  }

  def downloadExcel() {
    val downloadEle = driver.findElement(By.id(DOWNLOAD_LIST_ID))
    downloadEle.click()
  }

  def getNewPageHeaderOnClickingHelpLink: String = {
    val parentWindowHandle = driver.getWindowHandle
    val helpLink = driver.findElement(By.xpath("//a[@id = '"+HELP_ICON_ID+"']"))
    helpLink.click()
    sleepTime(2000)
    val windowHandles: util.Set[String] = driver.getWindowHandles
    import scala.collection.JavaConversions._
    var done = false
    for (windowHandle <- windowHandles if !done) {
      if (!(windowHandle == parentWindowHandle)) {
        driver.switchTo.window(windowHandle)
        done = true
      }
    }
    val pageHeader = driver.findElement(By.className("pageHeader")).getText
    driver.close()
    driver.switchTo().window(parentWindowHandle)
    pageHeader
  }

  def getColumnNames(): List[String] = {
    val headerEl = driver.findElement(By.id(PARTS_LIST_HEADER_ID))
    val headerNameEls = headerEl.findElements(By.tagName("th")).asScala
    val headerNamesList = headerNameEls.filter(_.getText.nonEmpty).map(_.getText).toList.patch(0, Nil, 1)
    headerNamesList
  }

  def getColumnValuesForColumn(columnName: String) = {
    val columnNumber = columnName match {
      case  "ID Number" => "2"
      case  "Name" => "3"
      case  "Category" => "4"
      case  "Suggested Unit Price" => "5"
      case  "Tax Rate" => "6"
      case  "Barcode Number" => "7"
    }
    val columnValueEls = driver.findElements(By.xpath(PARTS_CATALOG_BASE_XPATH +"//tr//td["+columnNumber+"]")).asScala
    val columnValuesList = columnValueEls.filter(!_.getText.isEmpty).map(_.getText).toList
    columnValuesList
  }

  private def findPartsRow(partNumber: String) = {
    val partsRowXpath: String = PARTS_CATALOG_BASE_XPATH + "//tr//td[2][text()='" + partNumber + "']//.."
    val partsRowEl = new WebDriverWait(driver, 10)
      .until(ExpectedConditions.elementToBeClickable(By.xpath(partsRowXpath)))
    partsRowEl
  }

  private def partsRowElements(partNumber: String) = {
    val partsRowEl = findPartsRow(partNumber)
    val partsRowEls = partsRowEl.findElements(By.tagName("td")).asScala
    partsRowEls
  }

  def getPartRowElementsList(partNumber: String): List[String] = {
    val partRowEls = partsRowElements(partNumber)
    var partRowElementsList = partRowEls.map(_.getText.trim).toList
    partRowElementsList = partRowElementsList.patch(0,Nil,1)
    partRowElementsList
  }

  def getPartName(partNumber: String): String = {
    val partRowEls = partsRowElements(partNumber)
    val partName = partRowEls(2).getText.trim
    partName
  }

  def getPartCategory(partNumber: String): String = {
    val partRowEls = partsRowElements(partNumber)
    val partCategory = partRowEls(3).getText.trim
    partCategory
  }

  def getPartUnitPrice(partNumber: String): String = {
    val partRowEls = partsRowElements(partNumber)
    val partUnitPrice = partRowEls(4).getText.trim
    partUnitPrice
  }

  def getPartBarcodeNumber(partNumber: String): String = {
    val partRowEls = partsRowElements(partNumber)
    val partBarcodeNumber = partRowEls(5).getText.trim
    partBarcodeNumber
  }

  def contextMenuOfPart(partNumber: String) = {
    val partRowEl = findPartsRow(partNumber)
    partRowEl.click()
    sleepTime((minWaitTime)*1000)
    new PartsCatalogPageContextMenuPopup(driver,this)
  }

  def sort(columnName: String, order: String) = {
    val headerEl = driver.findElement(By.xpath(PARTS_CATALOG_BASE_XPATH + "//tr//th//span[contains(text(), '"+ columnName +"')]"))
    headerEl.click()
    sleepTime((minWaitTime)*1000)
    val headerEl1 = driver.findElement(By.xpath(PARTS_CATALOG_BASE_XPATH + "//tr"))
    val element = headerEl1.findElement(By.tagName("img")).getAttribute("src")
    if (order.equalsIgnoreCase("ascending")) {
      if (element.contains("sortArrowUp.gif")) {
        val headerEl2 = driver.findElement(By.xpath(PARTS_CATALOG_BASE_XPATH + "//tr//th//span[contains(text(), '"+ columnName +"')]"))
        headerEl2.click()
        sleepTime((minWaitTime/2)*1000)
      }
    } else {
      if (element.contains("sortArrowDown.gif")) {
        val headerEl3 = driver.findElement(By.xpath(PARTS_CATALOG_BASE_XPATH + "//tr//th//span[contains(text(), '"+ columnName +"')]"))
        headerEl3.click()
        sleepTime((minWaitTime/2)*1000)
      }
    }
    this
  }



  def selectAllPartsCheckBox() {
    val selectAllCheckBox = new WebDriverWait(driver,10).until(ExpectedConditions.elementToBeClickable(By.id(SELECT_ALL_CHECKBOX_ID)))
    selectAllCheckBox.click()
  }

  def selectPartsByPartNumber(partNumberList: List[String]) = {
    for (partNumber <- partNumberList){
      val checkboxEl = driver.findElement(By.xpath("//td[2][text() = '" + partNumber + "']//..//td[1]//input"))
      checkboxEl.click()
    }
  }

  def getCatalogList() = {
    val catalogEls = driver.findElements(By.xpath("//select[@id = '" + SELECT_CATALOG_ID + "']//option")).asScala
    val catalogList = catalogEls.map(_.getText).toList
    catalogList
  }

  def selectCatalog(catalog: String) {
    val selectCatalogEl = new Select(driver.findElement(By.id(SELECT_CATALOG_ID)))
    selectCatalogEl.selectByVisibleText(catalog)
  }

  def selectCategory(categoryName: String) {
    val selectCategoryEl = new Select(driver.findElement(By.id(SELECT_CATEGORY_ID)))
    selectCategoryEl.selectByVisibleText(categoryName)
  }

  def getCategoriesList() = {
    val categoryEls = driver.findElements(By.xpath("//select[@id = '" + SELECT_CATEGORY_ID + "']//option")).asScala
    val categoriesList = categoryEls.map(_.getText).toList
    categoriesList
  }

  def addNewPart() = {
    val addNewPartButton = driver.findElement(By.id(ADD_NEW_PART_BUTTON_ID))
    addNewPartButton.click()
    sleepTime((minWaitTime/2)*1000)
    new AddNewPartPopup(driver,this)
  }

  def clickDeletePartFromToolbarAndAccept()= {
    val deletePartButton = driver.findElement(By.id(DELETE_PART_BUTTON_ID))
    deletePartButton.click()
    sleepTime((minWaitTime/2)*1000)
    try {
      val confirmDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]"))
      val deleteButton = confirmDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "Delete" + "']"))
      deleteButton.click()
    } catch {
      case e: Exception => {
        val noItemsToDeleteDialog = new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(By.xpath("//div[" + hasCssClass(DIALOG_ALERT_CLASS) + "]")))
        val okButton = noItemsToDeleteDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "OK" + "']"))
        okButton.click()
        sleepTime(minWaitTime * 2000)
        driver.switchTo.defaultContent
        new WebDriverWait(driver, 40).until(ExpectedConditions.invisibilityOfElementLocated(By.id(XORA_UNDERLAY_ID)))
      }
    }
    this
  }

  def clickDeletePartFromToolbarAndCancel() = {
    val deletePartButton = driver.findElement(By.id("deletePartsBtn"))
    deletePartButton.click()
    sleepTime((minWaitTime/2)*1000)
    val confirmDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]"))
    val cancelButton = confirmDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "Cancel" + "']"))
    cancelButton.click()
    this
  }

  def manageCategories() = {
    val manageCategoryButton = driver.findElement(By.id(MANAGE_CATEGORY_BUTTON_ID))
    manageCategoryButton.click()
    sleepTime((minWaitTime/2)*1000)
    new ManageCategoryPopup(driver,this)
  }

  def addNewPartButtonIsEnabled() = {
    val addNewPartButton = driver.findElement(By.id(ADD_NEW_PART_BUTTON_ID))
    val styleAttributeValue = addNewPartButton.getAttribute("style")
    var enabledFlag = true
    if(styleAttributeValue.equals("opacity: 0.3;")) {
      enabledFlag = false
    }
    enabledFlag
  }

  def deletePartButtonIsEnabled() = {
    driver.findElement(By.id(DELETE_PART_BUTTON_ID)).isEnabled
    //    val deletePartButton = driver.findElement(By.id(DELETE_PART_BUTTON_ID))
    //    val styleAttributeValue = deletePartButton.getAttribute("style")
    //    var enabledFlag = true
    //    if(!styleAttributeValue.equals("opacity: 1;")) {
    //      enabledFlag = false
    //    }
    //    enabledFlag
  }

  def manageCategoriesButtonIsEnabled() = {
    driver.findElement(By.id(MANAGE_CATEGORY_BUTTON_ID)).isEnabled
    //    val manageCategoriesButton = driver.findElement(By.id(MANAGE_CATEGORY_BUTTON_ID))
    //    val styleAttributeValue = manageCategoriesButton.getAttribute("style")
    //    var enabledFlag = true
    //    if(!styleAttributeValue.equals("opacity: 1;")) {
    //      enabledFlag = false
    //    }
    //    enabledFlag
  }

  def uploadPartsIsEnabled()={
    val uploadPartButton=driver.findElement(By.id(UPLOAD_PARTS_BUTTON_ID))
    val styleAttributeValue=uploadPartButton.getAttribute("style")
    var enabledFlag=true
    if(!styleAttributeValue.equals("opacity: 1;")) {
      enabledFlag = false
    }
    enabledFlag
  }
}

object PartsCatalogPage {
  val PAGE_TITLE = "Price Catalog: Internal, Showing all categories"
  val TITLE_CLASS = "pageHeadlineText"
  val PAGE_TITLE_XPATH = "//*[@class='" + TITLE_CLASS + "' and .//text()='" + PAGE_TITLE + "']"
  val TOOLBAR_ID = "parts.list.toolbar.contentWidget"
  val TOOLBAR_XPATH = "//div[@id='" + TOOLBAR_ID + "']//a//span"
  val TOOL_BAR_EXPAND_OR_COLLAPSE_IMAGE_ID = "parts.list.toolbar.contentWidgetImage"
  val COLLAPSE_IMAGE = "widget_Collapse.gif"
  val EXPAND_IMAGE = "widget_Expand.gif"
  val DOWNLOAD_LIST_ID = "tool.parts.list.download"
  val HELP_ICON_ID = "partsListInPageHelp"
  val PARTS_LIST_HEADER_ID = "listContentDiv"
  val PARTS_CATALOG_BASE_XPATH = "//div[@id='" + PARTS_LIST_HEADER_ID + "']"
  val SELECT_ALL_CHECKBOX_ID = "selectAll"
  val DIALOG_CONFIRM_CLASS = "dialog dialog-confirm"
  val DIALOG_BUTTON_CLASS = "linkButton"
  val DIALOG_ALERT_CLASS = "dialog dialog-alert"
  val XORA_UNDERLAY_ID = "xora-underlay"

  val SELECT_CATALOG_ID = "internalAndSOList"
  val SELECT_CATEGORY_ID = "partCategoryId"
  val ADD_NEW_PART_BUTTON_ID = "addPartsBtn"
  val DELETE_PART_BUTTON_ID = "deletePartsBtn"
  val MANAGE_CATEGORY_BUTTON_ID = "manageCatagoriesBtn"
  val UPLOAD_PARTS_BUTTON_ID="upload"
}
