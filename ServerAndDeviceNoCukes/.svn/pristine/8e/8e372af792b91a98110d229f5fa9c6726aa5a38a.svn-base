package com.xora.mc.pages.mileage

import com.xora.mc.pages.ListPageContextMenuPopup
import com.xora.mc.pages.mileage.CategoryContextMenuPopup._
import com.xora.mc.util.XpathUtils._
import org.openqa.selenium.support.ui.{ExpectedConditions, WebDriverWait}
import org.openqa.selenium.{By, WebDriver}

import scala.collection.JavaConverters._


/**
 * Created with IntelliJ IDEA.
 * User: admin
 * Date: 8/22/13
 * Time: 3:47 PM
 * To change this template use File | Settings | File Templates.
 */
object CategoryContextMenuPopup
{
  sealed abstract class CONTEXT_MENU_POPUP_OPTION(val displayValue: String)
  case object EDIT_CATEGORY extends CONTEXT_MENU_POPUP_OPTION("Edit Category")
  case object DELETE_CATEGORY extends CONTEXT_MENU_POPUP_OPTION("Delete Category")


  val CONTEXT_MENU_BODY_ID = "cssbox_body_id"
  val DIALOG_CONFIRM_CLASS = "dialog dialog-confirm"
  val DIALOG_BUTTON_CLASS = "linkButton"
  val CONTEXT_MENU_LIST_CLASS_ID = "actionList"
  val CONTEXT_MENU_CLOSE_BUTTON_ID = "puClose"
  val CONTEXT_MENU_HEADER_CLASS = "cssbox_head"
}

class CategoryContextMenuPopup (driver: WebDriver, parentPage: MileageConfigurePage) extends
ListPageContextMenuPopup[MileageConfigurePage](driver: WebDriver, parentPage: MileageConfigurePage) {
  def editCategory()=
  {
    this.selectOption(EDIT_CATEGORY)
    new AddCategoryPopup(driver,parentPage)
  }

  def acceptDeleteCategory() =
  {
    this.selectOption(DELETE_CATEGORY)
    acceptDeleteCategoryDialog()
    parentPage
  }

  def cancelDeleteCategory() =
  {
    this.selectOption(DELETE_CATEGORY)
    cancelDeleteCategoryDialog()
    parentPage

  }
  private def acceptDeleteCategoryDialog()
  {
    val confirmDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]"))
    val deleteButton = confirmDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "Delete" + "']"))
    deleteButton.click()
    new WebDriverWait(driver, 10).until(ExpectedConditions.invisibilityOfElementLocated(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]")))
  }
  private def cancelDeleteCategoryDialog()
  {
    val rejectDialog = driver.findElement(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]"))
    val cancelButton = rejectDialog.findElement(By.xpath("//a[" + hasCssClass(DIALOG_BUTTON_CLASS) + "]//span[text() = '" + "Cancel" + "']"))
    cancelButton.click()
    new WebDriverWait(driver, 10).until(ExpectedConditions.invisibilityOfElementLocated(By.xpath("//div[" + hasCssClass(DIALOG_CONFIRM_CLASS) + "]")))
  }

  def getContextMenuHeaderName() ={
    val contextMenuHeaderEle = driver.findElement(By.className(CONTEXT_MENU_HEADER_CLASS))
    contextMenuHeaderEle.getText
  }

  def listContextMenuItems():List[String]=
  {
    val menuItemEls = driver.findElements(By.cssSelector("li."+CONTEXT_MENU_LIST_CLASS_ID)).asScala
    val menuItems = menuItemEls.map(_.getText)
    menuItems.toList
  }

  def closeContextMenu()
  {
    val closeButton = new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(By.className(CONTEXT_MENU_CLOSE_BUTTON_ID)))
    closeButton.click()
  }

  protected def selectOption(option: CategoryContextMenuPopup.CONTEXT_MENU_POPUP_OPTION) {
    this.selectOption(option.displayValue)
  }
}

